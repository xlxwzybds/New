#
# This file is part of GDP.
# Copyright (C) 2022 Hai Wang and Qinhui Yang.
#
# GDP is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# GDP is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along
# with GDP. If not, see <https://www.gnu.org/licenses/>.
#
import time
import numpy as np
## XJY add
import re
import random
from scipy.optimize import minimize
import numpy as np
## XJY add

def gdp_map(A, temp_max, temp_amb, taskCoreRequirement, activeCores, availableCores, preferredCoresOrder, P_s):
    # The function to find the GDP optimized active core map
    # Inputs:
    # A: system thermal model matrix, usually A = B^T G^{-1} B according to the GDP paper
    # temp_max: temperature threshold scalar
    # temp_amb: ambient temperature scalar
    # taskCoreRequirement: the number of new active cores need to be mapped
    # activeCores: boolean vector of the existing active core map, indicating if each core is active (True) or inactive (False). If you want to override some existing active cores, set them to False.
    # availableCores: boolean vector of the current inactive cores that can be activated (active core candidates), indicating if each core can be activated (True) or cannot be activated (False)
    # preferredCoresOrder: the user specified activation order vector, -1 indicates the end of the preferred cores. These cores should be activated first (if available) before GDP computation. If user do not specify any activation order, simply set all elements to -1.
    # P_s: static power vector, each element is the static power value of each core, use an all zero vector if no static power
    # Output:
    # cores_to_activate: vector of the new active core indexes

    # total core number of the multi/many core system
    core_num = availableCores.shape[0]
    
    # find the user specified preferred cores that are still in available cores, they should be activated first without GDP computing
    inact_pref_cores = np.zeros(core_num) - 1 # initiate all elements to -1
    n_ipc = 0 # number of inactive preferred cores
    for core_id in preferredCoresOrder:
        if availableCores[core_id] == True and core_id != -1:
            inact_pref_cores[n_ipc] = core_id
            availableCores[core_id] = False
            activeCores[core_id] = True
            n_ipc = n_ipc+1

    # Initiate cores_to_activate using inact_pref_cores, becuase we need to activate the inactive preferred cores first. 
    cores_to_activate = inact_pref_cores[:taskCoreRequirement] # all the inactive preferred cores should be activated first

    # If taskCoreRequirement <= n_ipc, then we are simply done without GDP computation. Otherwise (if taskCoreRequirement > n_ipc), we need to determine the remaining active cores using GDP iterations.
    if taskCoreRequirement > n_ipc:
        # for 3D-DGP, Add something here 
        availableCores_new = np.pad(availableCores, (16, 0), 'constant', constant_values=False) # add for 3d-gdp
        availableBanks_new = np.pad(availableCores, (0, 16), 'constant', constant_values=False) # add for 3d-gdp
        A = np.atleast_2d(A[availableBanks_new][:,availableCores_new])
        P_s = P_s[availableCores_new] # for 3D_GDP

        # initiate GDP iterations
        T_s = A@P_s # static power's impact on temperature, should be substracted from T_th later
        T_th = np.full((core_num,), temp_max - temp_amb) - T_s # threshold temperature vector
        if np.sum(activeCores) > 0:
            Ai = np.atleast_2d(A[activeCores][:,activeCores])
            T_th_i = T_th[activeCores]
            Pi = np.linalg.solve(Ai, T_th_i) # power budget of the existing active cores
            T_rm = T_th[availableCores] - A[availableCores][:,activeCores]@Pi # temperature threshold headroom of the available cores (candidates) by substracting the existing active cores' thermal impact
        else: # when there is no existing active core and no user preferred core
            T_rm = T_th[availableCores]
        
        # for 3D-DGP, the matrix Aa should be changed here
        Aa = np.atleast_2d(A[availableCores][:,availableCores]) # orignal Code for DDR-gdp method
        #Aa = np.atleast_2d(A[availableBanks_new][:,availableCores_new])

        idx_available_cores = np.flatnonzero(availableCores) # original for ddr-gdp
        # idx_available_cores = np.flatnonzero(availableCores_new) # change for 3d-gdp
        for i in range(n_ipc, taskCoreRequirement):
            # find the core in available cores (candidates) which leads to the largest power budget (indicated by the largest inner product with T_rm)
            idx = 0
            for j in range(1,idx_available_cores.shape[0]): 
                if np.inner(Aa[:][j],T_rm) > np.inner(Aa[:][idx],T_rm):
                    idx = j
            # add the new active core (idx) to the exsiting active cores
            cores_to_activate[i] = idx_available_cores[idx] # add the new active core (idx) to the list of cores to activate as the final output
            availableCores[idx_available_cores[idx]] = False
            activeCores[idx_available_cores[idx]] = True
            Aa = np.atleast_2d(A[availableCores][:,availableCores]) # change for 3D-GDP Method
            idx_available_cores = np.flatnonzero(availableCores)
            
            # update T_rm
            Ai = np.atleast_2d(A[activeCores][:,activeCores]) 
            T_th_i = T_th[activeCores]
            Pi = np.linalg.solve(Ai, T_th_i)
            T_rm = T_th[availableCores] - A[availableCores][:,activeCores]@Pi

    print("the cores_to_activate is below ",cores_to_activate);
    return cores_to_activate

def fast_cbrt(y, iterations=3):
    x = y / 3.0  #jk
    for _ in range(iterations):
        x = x - (x**3 - y) / (3 * x**2)  
    return x

def file_access():
    ############################################
    ## Aim : clean the frequnecy file , and get the data access of bank from file
    ## FILE_3D_ACCESS_PATH : store data access time each epoch
    ## FILE_3D_CORE_PATH : store core frequency data
    ## FILE_3D_BANK_PATH : store bank frequency data
    FILE_3D_ACCESS_PATH = "./system_sim_state_3D/bank_access_counter.txt"
    FILE_3D_CORE_PATH = "./system_sim_state_3D/frequency_core.txt"
    FILE_3D_BANK_PATH = "./system_sim_state_3D/frequency_bank.txt"
    with open(FILE_3D_CORE_PATH, "w") as core_file:
        core_file.write("") 
    core_file.close()

    with open(FILE_3D_BANK_PATH, "w") as bank_file:
        bank_file.write("") 
    bank_file.close()

    with open(FILE_3D_ACCESS_PATH, "r") as access_file:
        num_access = access_file.read()
        num_access = int(num_access)
    access_file.close()

    return num_access

def get_benchmark():
    ############################################
    ## Aim : get the benchmark name from the config file
    file_config = open('../config/base.cfg')
    for line in file_config:
        if line.startswith('benchmark_name'):
            line_words = re.split('=|#|\s', line)
            line_words = list(filter(None, line_words))
            benchmark_name = line_words[1]
    file_config.close()
    return benchmark_name

def predict_bank_power(num_access , benchmark_name):
    ############################################
    ## Aim : predict the bank power in next simulation epoch using num_access and benchmark_name
    ## print(benchmark_name)
    if (benchmark_name == 'blackscholes') or (benchmark_name == 'swaption'):
        if (num_access <100):
            power_per_bank = 0.02
        elif (num_access < 1000):
            power_per_bank = 0.1
        elif (num_access < 2000):
            power_per_bank = 0.2
        elif (num_access < 3000):
            power_per_bank = 0.36
        else:
            power_per_bank = 0.42

    if (benchmark_name == 'bodytrack'):
        if (num_access <100):    ## for bodytrack
            power_per_bank = 0.1 
        elif (num_access < 4000):
            power_per_bank = 0.61
        elif (num_access < 6000):
            power_per_bank = 0.75
        elif (num_access < 8000):
            power_per_bank = 1.3
        elif (num_access <10000):
            power_per_bank = 1.68 
        elif (num_access <12000):
            power_per_bank = 1.8
        else:
            power_per_bank = 1.9

    if (benchmark_name == 'streamcluster') or (benchmark_name == 'dedup'):
        if (num_access <100):    ## for streamcluster
            power_per_bank = 0.05
        elif (num_access < 4000):
            power_per_bank = 0.8
        elif (num_access < 6000):
            power_per_bank = 1.0
        elif (num_access < 8000):
            power_per_bank = 1.2
        elif (num_access < 10000):
            power_per_bank = 1.4
        elif (num_access < 12000):
            power_per_bank = 1.7
        else:
            power_per_bank = 1.8

    return power_per_bank


def file_write(core_freq , bank_freq):
    ############################################
    ## Aim : write back the data
    ## FILE_3D_ACCESS_PATH : store data access time each epoch
    ## FILE_3D_CORE_PATH : store core frequency data
    ## FILE_3D_BANK_PATH : store bank frequency data
    closest_value = float(int(bank_freq * 10) / 10  )  
    FILE_3D_ACCESS_PATH = "./system_sim_state_3D/bank_access_counter.txt"
    FILE_3D_CORE_PATH = "./system_sim_state_3D/frequency_core.txt"
    FILE_3D_BANK_PATH = "./system_sim_state_3D/frequency_bank.txt"
    with open(FILE_3D_CORE_PATH, "a") as core_file:
        core_file.write(str(core_freq)) 
        core_file.write('\t') 
    core_file.close()
    
    with open(FILE_3D_BANK_PATH, "a") as bank_file:
        bank_file.write(str(closest_value)) 
        bank_file.write('\t') 
    bank_file.close()


def gdp_power(A, core_map, temp_max, temp_amb, P_s, P_k, T_c, gdp_mode):
    # The function to compute the GDP power budget for a given active core map
    # Inputs:
    # A: system matrix, usually A = B^T G^{-1} B according to the GDP paper
    # core_map: boolean vector of the active core map, indicating if each core is active (True) or inactive (False)
    # temp_max: temperature threshold scalar
    # temp_amb: ambient temperature scalar
    # P_s: static power vector, each element is the static power value of each core, use an all zero vector if no static power
    # P_k: power vector of all cores at the previous step (assume current time is t, power budgeting/DVFS step is h, P_k is the power from time t-h to t, and we want to compute the power budget P for time t to t+h)
    # T_c: temperature vector of all cores at the current time (at time t in the example of P_k)
    # gdp_mode: 'steady' for steady state GDP and 'transient' for transient GDP
    # Output:
    # P: power budget of the active cores according to core_map

    # Compute the static power's impact on temperature. If the static power is assumed to be constant (such as in HotSniper), this impact is constant and actually can be pre-computed only once outside
    number_access = file_access()
    benchmark_name = get_benchmark()
    execution_time = 0
    start_time = time.time()
    
    # get the number of core
    NUM = A.shape[0] / 2 ;

    ####################################
    ## 1.XJY change: cut P_s [32x1] to [16x1]
    ####################################
    T_s = A@P_s ; # dimension of T_s is [32x1]
    
    ####################################
    ## 2.XJY change: 
    ####################################
    bank_map     = np.pad(core_map, (0, 16), 'constant', constant_values=False)
    core_map_new = np.pad(core_map, (16, 0), 'constant', constant_values=False)
    Ai = np.atleast_2d(A[bank_map][:,:])
    Ac = np.atleast_2d(A[bank_map][:,core_map_new])
    A_tc = np.atleast_2d(A[core_map_new][:,:])              # Critical temperature of banks belows the Active_Core
    A_lc = np.atleast_2d(A[core_map_new][:,core_map_new])   # How activate Cores affect the temp of banks

    end_time = time.time()
    execution_time1 = end_time - start_time
    num_access = file_access()

    #########################################
    start_time = time.time()
    # do not change here !
    if gdp_mode == 'steady': # for steady state GDP
        T_th = np.full((Ai.shape[0],), temp_max - temp_amb) - T_s[core_map] # threshold temperature vector
    else: # for transient GDP
        #T_th = np.full((Ai.shape[0],), temp_max) - T_c[bank_map] + Ac@P_k[core_map_new] - T_s[bank_map]
        MaxTemp_bank = np.max(T_c[bank_map])
        MaxTemp_core = np.max(T_c[core_map_new])
        #if ((MaxTemp_bank >= MaxTemp_core) & (num_access>6000)):
        if (MaxTemp_bank >= MaxTemp_core) :
            #Situation_1 : temperature of Bank is the critical temperature.
            T_th = np.full((Ai.shape[0],), temp_max) - T_c[bank_map] + Ac@P_k[core_map_new] - T_s[bank_map]
            P = np.linalg.solve(Ac, T_th) + P_s[core_map_new]
            #print("max temperature is bank layer")
        else :
            #Situation_2 : temperature of Core is the Critical temperature
            T_th = np.full((A_tc.shape[0],), temp_max) - T_c[core_map_new] + A_lc@P_k[core_map_new] - T_s[core_map_new]
            P = np.linalg.solve(A_lc, T_th) + P_s[core_map_new]
            #print("max temperature is core layer")
    #print(T_c)
    #print(P_k)

########################################################################################
########################################################################################
########################################################################################
########################################################################################

    ##################################
    ## Insert core GDP power , TP(total power) = memory power + core_GDP_power
    ##################################
    CoreMap = np.loadtxt('./system_sim_state/gdp_map.txt').astype(int)

    sorted_arr = np.zeros_like(CoreMap)
    sorted_arr[:] = np.sort(CoreMap)

    #print(CoreMap)
    TP = P_k ;
    NewCoreMap = CoreMap + NUM ;
    Len = len(P)
    for j in range(0, Len):
        P_L = NewCoreMap[j].astype(int)
        TP[P_L] = P[j]
    TotalPower = TP

    NEW_P = P.copy() ## The new method core power , Calculate it using 3D-GDP method
    ############################################	
    ## Optimization implement
    ############################################	
    # predict the bank power in NORMAL_POWER
    power_per_bank = predict_bank_power(num_access , benchmark_name)

    length = len(CoreMap) # Calculate the channel Power Budget one by one
    bool_list = core_map
    indices = np.where(bool_list)[0]
    #length = len(indices)
    #print(length1)
    #print(length2)
    #if length2 < length1 :
    #    length = length2
    #else:
    #    length = length1

    for i in range(0,length):
        start_time = time.time()
    #########################
    ## 1. get other temperautre influence matrix
    #########################
    # NUM = 16
        #C_N = CoreMap[i].astype(int)
        C_N = sorted_arr[i].astype(int)
        #if length2 < length1 -2 :
        #    C_N = sorted_arr[i].astype(int)
        #else:
        #    C_N = CoreMap[i].astype(int)
        #print('CN is ', C_N)
        mem_num = C_N.astype(int)
        core_num = (C_N + NUM).astype(int)  ## print(C_N)   print(core_num)

        ## other channel power
        P_other = TotalPower.copy()
        P_other[mem_num] = 0
        P_other[core_num] = 0 ## print(TP)     ## print(P_other)

        ## other channel matrix
        ## A_c : Core critical Power Matrix
        ## A_m : Mem  critical Power Matrix
        channel_map = np.zeros(A.shape[0] , )
        channel_map[C_N] = 1
        channel_map = np.asarray(channel_map, dtype = bool)
        A_o = np.atleast_2d(A[channel_map][:,:])
        T_rest = temp_max - T_c[channel_map] -  A_o@P_other - T_s[channel_map]

        ## critical channel matrix
        CoreNum = np.zeros(A.shape[0] ,)
        CoreNum[core_num]  = 1 ## print(CoreNum)
        CoreNum = np.asarray( CoreNum , dtype = bool)
        A_c = np.atleast_2d(A[channel_map][:,CoreNum])
        MemNum = np.zeros(A.shape[0] , )
        MemNum[mem_num]  = 1   ## print(MemNum)
        MemNum = np.asarray( MemNum , dtype = bool)
        A_m = np.atleast_2d(A[channel_map][:,MemNum])
        Ac = A_c[0][0]
        Am = A_m[0][0]
        pc = TotalPower[core_num]
        pm = TotalPower[mem_num]
        ##T_rest = T_rest + Ac * pc + Am * pm
        ## A bug for  NEW
        T_rest = T_rest + Ac * pc + Am * pm 

        end_time = time.time()
        execution_time1 = end_time - start_time
        #print(f"2core execution time: {execution_time:.6f} ")

        ###### constraint optimization
        ##################################################
        ## 1.1 Aim 
        ##################################################
        e = 1e-10 # 
        #fun = lambda x : (-x[0]) / ( 0.014*x[0]*( 0.16*(x[1]*0.01)**2 + 0.12*(x[1]*0.01) + 0.62  )+ 0.725   ) ## blackscholes or swaptions
        fun = lambda x : (-x[0]) / ( 1.9877 + 0.3098 * x[0] + -2.3148*x[1] + 0.0807*x[0]**2 + 0.1615*x[0]*x[1]  -0.4037*x[1]**2 ) ## bodytrack
        #fun = lambda x :-(-0.3252 + (0.0000)*1 + (0.6760)*x[0] + (2.9514)*x[1] + (-0.1155)*x[0]**2 + (-1.1965)*x[0]*x[1] + (-4.8111)*x[1]**2 + (0.0184)*x[0]**3 + (-0.0848)*x[1]**x[0]**2 + (1.5632)*x[0]*x[1]**2 + (2.7500)*x[1]**3)
        #fun = lambda x : (-x[0]) /(0.6145 + 0.3897*x[0] + 0.6145*x[1] - 0.0482*x[0]**2 - 0.0482*x[0]*x[1] - 0.6145*x[1]**2) ## streamcluster

        ##################################################
        ## 1.2 consPower
        ##################################################
        original_power = P_k[core_num]
        file_path = './PeriodicFrequency.log'
        with open(file_path, 'r') as file:
            lines = file.readlines()
            last_line = lines[-1].strip()  
        matrix = np.fromstring(last_line, sep=' ')  
        original_freq = matrix[mem_num].astype(float)
        a = original_power / ( original_freq **3)
        b = power_per_bank     # 
        #Min_Freq = [1 , 0.4]  # below
        #Max_Freq = [4 , 1.0]  # above 
        Min_Freq = [1 , 0.8]  # below
        Max_Freq = [3 , 1.0]  # above 
        bounds = [(Min_Freq[i], Max_Freq[i]) for i in range(len(Min_Freq))]

        ##################################################
        ## 1.3 Optimization 
        ##################################################
        T_scalar = float(T_rest[0])
        cons = ({'type': 'eq', 'fun': lambda x: (a*x[0]**3)*Ac + ( b*(0.5*x[1]+0.5)*Am )  - T_scalar})
        x0 = np.array((1.0, 0.8)) 
        res = minimize(fun, x0,bounds=bounds,method='SLSQP', constraints=cons)	

        ##################################################
        ## Other WAY 
        ##################################################
        #start_time = time.time()

        #freq_mem = [0.4,0.5 ,0.6,0.7,0.8,0.9,1.0] 
        #freq_mem = np.linspace(0.4, 1.0, 13)
        #len_mem = len(freq_mem) # Calculate the channel Power Budget one by one
        #IPS_init = 0
        #freq_c = 1.0 
        #freq_m = 1.0
        #for j in range(0,len_mem):
        #    #constraint_fun = lambda x: (a * x[0]**3) * Ac + (b * (0.5 * x[1] + 0.5) * Am) - T_rest
        #    POWER_mem =  power_per_bank * (freq_mem[j] *0.5+0.5)
        #    POWER_core = (T_rest - POWER_mem * Am )/(Ac*a)
        #    POWER_core = int( POWER_core)
        #    freq_core = float(POWER_core**(1/3))

        #    #denom = Ac * a
        #    #if (a * freq_core**3) * Ac + (b * (0.5 * x[1] + 0.5) * Am) > T_rest:
        #    #    print("Denominator Ac * a is too small, possible division by zero.")
        #    #freq_core = fast_cbrt(POWER_core)

        #    if (freq_core > 4.0 ):
        #        freq_core = 4.0

        #    #CPI = ( numA* freq_core *( numB*(freq_mem[j]*0.01)**2 + numC*(freq_mem[j]*0.01) + numD  )+ numF   )
        #    #IPS =  freq_core / ( numA* freq_core *( numB*(freq_mem*0.01)**2 + numC*(freq_mem*0.01) + numD  )+ numF   )
        #    #fun = lambda x : (-x[0]) / ( numA*x[0]*( numB*(x[1]*0.01)**2 + numC*(x[1]*0.01) + numD  )+ numF   ) ## blackscholes or swaptions
        #    #fun = lambda x : (-x[0]) / ( 1.9877 + 0.3098 * x[0] + -2.3148*x[1] + 0.0807*x[0]**2 + 0.1615*x[0]*x[1]  -0.4037*x[1]**2 ) ## bodytrack
        #    #fun = lambda x : (-x[0]) /(0.6145 + 0.3897*x[0] + 0.6145*x[1] - 0.0482*x[0]**2 - 0.0482*x[0]*x[1] - 0.6145*x[1]**2) ## streamcluster
        #    #CPI = ( numA* freq_core *( numB*(freq_mem[j]*0.01)**2 + numC*(freq_mem[j]*0.01) + numD  )+ numF   ) # swaption
        #    CPI = 1.9877 + 0.3098 * freq_core + -2.3148*freq_mem[j] + 0.0807*freq_core**2 + 0.1615**freq_mem[j]  -0.4037*freq_mem[j]**2 # bodytrack
        #    #CPI = (0.6145 + 0.3897*freq_core + 0.6145*freq_mem[j] - 0.0482*freq_core**2 - 0.0482*freq_core*freq_mem[j] - 0.6145*freq_mem[j]**2) ## streamcluster
        #    IPS =  freq_core / CPI
        #    #IPS = (0.68 -0.35 *freq_core + 0.46*freq_mem[j] + 0.12*freq_core**2 + 0.23*freq_core*freq_mem[j] - 0.57*freq_mem[j]**2) # streamcluster


        #    if ( IPS >= IPS_init):
        #        if (freq_core >= 1.0):
        #            IPS_init = IPS
        #            freq_c = freq_core
        #            freq_m = freq_mem[j]

        end_time = time.time()
        execution_time2 = end_time - start_time
        execution_time = execution_time1 + execution_time2 + execution_time
        #print(f"core execution time: {execution_time:.6f} ")


        ###################################################
        ### 1.4 WRITE into FILE
        ##################################################
        # write back the frequency of cores and banks
        file_write(res.x[0],res.x[1])

        ## Get the closed bank frequency
        #reference_values = np.array([0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])
        #closest_index = np.argmin(np.abs(reference_values - res.x[1]))
        ##closest_index = np.argmin(np.abs(reference_values - freq_m))
        #closest_value = reference_values[closest_index]
        #closest_value = float(int(res.x[1] * 10) / 10  )  
        #with open(FILE_3D_CORE_PATH, "a") as core_file:
        #    core_file.write(str(res.x[0])) 
        ##   core_file.write(str(freq_core)) 
        #    core_file.write('\t') 
        #core_file.close()
        #
        #with open(FILE_3D_BANK_PATH, "a") as bank_file:
        #    #bank_file.write(str(closest_value-0.1)) 
        #    bank_file.write(str(closest_value)) 
        #    bank_file.write('\t') 
        #bank_file.close()
        
    print(f"core execution time: {execution_time:.6f} ")
        

    return P


#        ##################################################
